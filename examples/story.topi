// Originally generated by ChatGPT-3.5.
// This was done by pasting in the `syntax.md` file
// and prompting a 5 minute fantasy quest.
// Manual revisions and fixes then added.

var knowledge = Set{}
var inventory = Set{}
var torchLit = false
var party = Set{"Rogue", "Druid", "Fighter", "Archer"}
var gold = 0
var spiderDefeated = false

class Character = {
	injured = false,
}
var rogue = new Character{}
var druid = new Character{}
var fighter = new Character{}
var archer = new Character{}

=== TAVERN {
    :Innkeeper: "Welcome to the Rusty Tankard, travelers. A dire quest awaits those who are brave."
    :Innkeeper: "A terrible curse plagues our town, and we need your help. Are you four up for the challenge?"
    fork DECISION {
        ~ "Accept the quest" {
            :Rogue: "We accept the quest. What must we do?"
            :Innkeeper: "To lift the curse, you need to retrieve the legendary Sapphire Amulet from the Forbidden Forest."
            :Innkeeper: "But beware, the forest is filled with traps and monsters. You'll need these items to survive."
            :: "The Innkeeper give you a Map, a Torch, and a Healing Potion. Use them wisely."
            :Rogue: "We'll do it."
            inventory = Set{"Map", "Torch", "Healing Potion"}
		    => FORBIDDEN_FOREST
        }
        ~ "Decline the quest" {
            :Innkeeper: "Very well, but remember, the curse may soon reach you too."
        }
    }
}

=== FORBIDDEN_FOREST {
    :Rogue: "The Forbidden Forest, dark and foreboding. Let's consult the Map."
    :Rogue: "Shall we light the Torch or move in darkness?"
	:Archer: "We need to see, don't we!?"
	:Druid: "No! We must not alert whatever's out there."
    fork^ {
        ~ "Light the Torch" {
			torchLit = true
            :Rogue: "Torch lit, let's move forward."
        }
        ~ "Move in darkness" {
            :Rogue: "Darkness conceals our presence, but it's risky."
        }
	}
	:: "As you move through the forest you feel the ground move about your feet."
	if torchLit :: "As you look down the roots are moving like snakes, encircling around your party."
	:Archer: "AHH! Something has me! Help!!"
	fork ^ {
		~ "Fighter, grab him!" {
			:: "Fighter holds onto Archer."
			:: "As he struggles to maintain a grip you feels around in the dark at Archer's feet, stabbing blindly into the ground."
			:: "After a few moments Archer is ripped away into the forest. His screams die away in the blackness."
			:Druid: "He's... he's gone..."
			:Rogue: "Damnit! What was that!?"
			party.remove("Archer")
		}
		if torchLit {
			~ "Fighter, attack the roots!" {
				:: "Fighter hacks away at the roots holding Archer."
				:: "After a few good hits the roots retreat back into the ground."
				:Archer: "Thank you! I think you got my though. My leg is pretty badly damaged though."
				fork^ {
					~ "Use the healing potion" {
						:Rogue: "Here, let's use this."
						inventory.remove("Healing Potion")
					}
					~ "We can't afford to use the healing potion yet" {
						:Rogue: "You'll have to continue on like that."
						:Rogue: "I'm sorry"
						archer.injured = true
					}
				}
			}
			~ "Druid, try to command the roots!" {
				:: "The druid begins casting a spell."
				:: "The roots loosen from Archer's leg."
				:: "Just as they let go, they quickly snap at Druid, slashing his face before fleeing away."
				:Druid: "Ahhh my eye!"
				fork^ {
					~ "Use the healing potion" {
						:Rogue: "Here, let's use this."
						:Druid: "Thank you."
						inventory.remove("Healing Potion")
					}
					~ "We can't afford to use the healing potion yet" {
						:Rogue: "You'll have to continue on like that."
						:Rogue: "I'm sorry"
						druid.injured = true
					}
				}
			}
		}
	} 
	:Figher: "Let's keep moving"
    :: "Ahead, you find a hidden chest barely hidden behind some shrubs."
	:Rogue: "Do we open it?"
    fork^ CHEST {
        ~ "Open the chest" {
            :Rogue: "Inside, we find a Bag of Gold and a Poisonous Snake!"
			gold += 100
            :: "The snake bites the Druid, we must use the Healing Potion."
            if inventory.has("Healing Potion") {
				:Rogue: "We must use the healing position!"
                :Druid: "Thank you for saving me."
                inventory.remove("Healing Potion")
            } else {
                :Druid: "We're out of Healing Potions. I'm feeling weak."
				:Druid: "I'm... not going to make it."
				party.remove("Druid")
            }
        }
        ~ "Leave it" {
            :Rogue: "Let's leave the chest untouched."
        }
    }
    :Rogue: "A fork in the path. Do we go left or right?"
	if party.has("Druid") {
		:Druid: "We do have a map, even if I can't read it very well anymore."
		fork^ {
			~ "Read the map" {
				:Rogue: "They both end up at the same place."
				:Rogue: "Left looks... simple, plain, just a line."
				:Rogue: "Right looks dark, jagged."
				knowledge.add("ReadMap")
			}
			~ "Don't read the map" {
				:Rogue: "Adventure calls for the unknown, it will only cheapen our experiences!"
				:: "You burn the map."
				if party.has("Druid") and druid.injured :Druid: "I've lost an eye already on this adventure, and you burn our map!?!?"
				if party.has("Archer") :Archer: "What is wrong with you!?"
			}
		}
	}

    fork PATH {
        ~ "Go left" {
            :: "We move left, deeper into the forest."
			=> LEFT
        }
        ~ "Go right" {
            :: "We go right!"
			if knowledge.has("ReadMap") :: "The easy path is never easy!"
			=> RIGHT
        }
    }
}

=== LEFT {
	:Fighter: "It seems too calm. Be prepared."
	if !torchLit :Druid: "Bright too, but it's still the middle of the night, yet feels like mid-morning. The torch isn't doing anything."
    :: "Suddenly, a Giant Spider drops from the trees!"
    fork^ {
        ~ "Fight the spider" {
            :Fighter: "I'll take on the spider!"
			:: "The Fighter attacks head on"
			:: "Landing a mighty hit on one of the large spindly legs."
			:: "The spider bites down on his shoulder. Forcing Fighter down to one knee."
			:: "He rams his sword into the side of the Spider's head."
            :: "The Fighter bravely defeats the spider. Well done!"
			spiderDefeated = true
			fighter.injured = true
        }
		if party.has("Archer") {
	        ~ "Shoot the spider" {
	            :Archer: "I'll shoot the spider with my bow."
	            :: "The Archer's arrow pierces one of the spider's many eyes. It drops immediately."
				:Rogue: "Great shot!"
				spiderDefeated = true
	        }
		}
        ~ "Flee" {
            :Rogue: "We flee from the spider but leave our path unclear."
			if party.has("Archer") and archer.injured {
				:: "As you run away Archer lags behind due to his injuries."
				party.remove("Archer")
			} else {
				:: "As you run away Fighter lags behind due to his armour."
				party.remove("Fighter")
			}
			:: "Just as you notice he isn't keeping up you see the spider lunge at {if party.has("Archer") and archer.injured "Archer" else "Fighter"}, knocking him to the ground."
			:: "The spider sinks his fangs into his back, pinning him to the ground."
			:Rogue: "We have to keep going!"
        }
    }
	=> TREE
}

=== RIGHT {
	 :: "You come across a rickety bridge over a chasm." 
	:Rogue: "Do we cross it?"
    fork {
        ~ "Cross the bridge" => CROSS_BRIDGE
		~ "Find an alternate route" {
            :: "You search for an alternate path around the chasm."
            :Rogue: "I think I see a hidden cave entrance."
		    :Rogue: "There's a treasure chest. Do we open it?"
			if gold == 100 and party.has("Druid") :Druid: "Not again."
		    fork^ {
		        ~ "Open the chest" {
		            :: "Inside the chest, you discover a Ruby Gem."
		            inventory.add("Ruby Gem")
		        }
		        ~ "Leave it" {
		            :: "You decide to leave the chest untouched."
		        }
		    }
			:Rogue: "Doesn't seem to be much else here."
			fork {
				~ "Return back and take the left path." => LEFT
				~ "Return back to the bridge and cross it." => CROSS_BRIDGE
			}
        }
    }
	=== CROSS_BRIDGE {
		var hasGone = Set{}
		var member = ""
		:Rogue: "We should cross one at a time."
		while hasGone.count() < party.count() {
			if hasGone.count() == 0 :Rogue: "Who wants to go first?"
			else :Rogue: "Who's next?"
			fork^ {
				~* "Rogue" {
					:Rogue: "I'll go{if hasGone.count() == 0 " first." else "."}"
					member = "Rogue"
				}
				if party.has("Archer") ~* "Archer" {
					:Archer: "{if hasGone.count() == 0 "Damnit. " else ""}Ok."
					member = "Archer"
				}
				if party.has("Fighter") ~* "Fighter" {
					:Fighter: "This isn't going to go well."
					member = "Fighter"
				}
				if party.has("Druid") ~* "Druid" {
					:Druid: "Alright, let's do this."
					member = "Druid"
				}
			}
			hasGone.add(member)
			if hasGone.count() == party.count() {
				if member != "Rogue" {
					:: "The bridge begins to give."
					:: "One of the ropes snaps"
					:: "{member} tries to hang on but it's no use."
					:: "{member} falls down into the chasm."
					party.remove(member)
				}
			}
			else if hasGone.count() != party.count() {
				:: "{member} crosses successfully."
			}
		}

		=> TREE
	}
}

=== TREE {
	:: "You come to a giant tree, twenty feet in diameter."
	:: "The trunk has a large hallowed out area."
	:: "Inside you can see the Sapphire Amulet."
	:: "You take the amulet."
	:: "After a long journey, you've finally found the Sapphire Amulet. The curse is broken."
	:Rogue: "Let's get back."
	=> TAVERN_END
}

=== TAVERN_END {
    :Innkeeper: "You've returned! Our town is saved!"
	if spiderDefeated {
	    :Innkeeper: "For your bravery, you may keep the Sapphire Amulet."
		:Rogue: "Thank you."
		inventory.add("Sapphire Amulet")
	}
	if party.count() == 1 {
		:Rogue: "I lost everyone on this journey."
	}
	if !party.has("Archer") {
		if party.has("Fighter") :Fighter: "I still cannot forgive myself for not saving Archer."
		else if party.has("Druid") :Druid: "How could we lose Archer."
		else :Rogue: "Archer..."
	}
	if !party.has("Druid") {
		if party.has("Archer") :Archer: "But we lost Druid."
		else if party.has("Fighter") :Fighter: "Druid was a good man, he will be missed."
		else :Rogue: "Druid..."
	}
	if !party.has("Fighter") {
		if party.has("Druid") :Druid: "May Fighter return to the harmony."
		else if party.has("Archer") :Archer: "Rest in peace, Fighter."
		else :Rogue: "Fighter..."
	}
}
